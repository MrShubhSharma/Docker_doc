to check we can run in terminal
  docker
for version check 
  docker -v
for the help 
  docker --help

docker run -it Ubuntu 
in the above command 
ubuntu : opersting system
it : interactivetly

Managing Containers:
docker run: Create and start a new container.
docker start: Start one or more stopped containers.
docker stop: Stop one or more running containers.
docker restart: Restart one or more containers.
docker pause: Pause all processes within one or more containers.
docker unpause: Unpause all processes within one or more containers.
docker kill: Kill one or more running containers.
docker rm: Remove one or more containers.
docker ps: List running containers.
docker ps -a: List all containers (running and stopped).
docker logs: Fetch the logs of a container.
docker exec: Run a command inside a running container.
docker attach: Attach local standard input, output, and error streams to a running container.

Managing Images:

docker images: List all locally available images.
docker pull: Pull an image or a repository from a registry.
docker build: Build an image from a Dockerfile.
docker push: Push an image or a repository to a registry.
docker rmi: Remove one or more images.
docker inspect: Display detailed information on one or more images or containers.
docker tag: Tag an image into a repository.

What does network mean in docker ?
->In Docker, "network" refers to how containers communicate with each other and with the outside world. When you run 
multiple containers, they often need to talk to each other or connect to external services.Docker provides networking 
capabilities to facilitate this communication.
-> Docker networks allow containers to communicate securely and efficiently. You can create different types of networks,
such as bridge networks for containers on the same host to communicate, overlay networks for containers across multiple
hosts to communicate, and host networks for containers to share the network namespace with the Docker host.

Managing Networks:

docker network create <my_network> : Create a new network.
docker network ls: List networks.
docker network inspect <my_network> : Display detailed information on one or more networks.
docker network connect <my_network> <container_name> : Connect a container to a network.
docker network disconnect <my_network> <container_name> : Disconnect a container from a network.

What do you mean by volumes ?
->In  Docker, a "volume" is a mechanism for persistently storing data generated by and used by Docker 
containers. Essentially, it's a way to share data between a container and the Docker host, or between 
multiple containers.

->It allows data to be stored outside the container itself, making it accessible even if the container
stops running or gets deleted. This helps in sharing data between containers and also ensures that 
important data isn't lost when a container is removed or recreated.

Managing Volumes:

docker volume create: Create a new volume.
docker volume ls: List volumes.
docker volume inspect: Display detailed information on one or more volumes.
docker volume rm: Remove one or more volumes.


Docker Compose (for managing multi-container applications):

docker-compose up: Build and start services.
docker-compose down: Stop and remove containers, networks, images, and volumes.

What does Docker Swarm ?
->Docker Swarm is a tool provided by Docker that helps you manage a cluster of 
Docker hosts and orchestrate the deployment and scaling of containerized applications 
across multiple machines. In simple terms, it's like having a team of Docker hosts 
(computers or servers) working together to run your applications smoothly.

Docker Swarm (for orchestration):

docker swarm init: Initialize a swarm.
docker swarm join: Join a swarm as a worker or manager.
docker service create: Create a new service.
docker service ls: List services.
docker service inspect: Display detailed information on one or more services.
docker service scale: Scale one or more replicated services.
